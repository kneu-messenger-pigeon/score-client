// Code generated by mockery v2.20.0. DO NOT EDIT.

package Mocks

import (
	mock "github.com/stretchr/testify/mock"

	scoreApi "github.com/kneu-messenger-pigeon/score-api"
)

// ClientInterface is an autogenerated mock type for the ClientInterface type
type ClientInterface struct {
	mock.Mock
}

// GetStudentDiscipline provides a mock function with given fields: studentId, disciplineId
func (_m *ClientInterface) GetStudentDiscipline(studentId uint32, disciplineId int) (scoreApi.DisciplineScoreResult, error) {
	ret := _m.Called(studentId, disciplineId)

	var r0 scoreApi.DisciplineScoreResult
	var r1 error
	if rf, ok := ret.Get(0).(func(uint32, int) (scoreApi.DisciplineScoreResult, error)); ok {
		return rf(studentId, disciplineId)
	}
	if rf, ok := ret.Get(0).(func(uint32, int) scoreApi.DisciplineScoreResult); ok {
		r0 = rf(studentId, disciplineId)
	} else {
		r0 = ret.Get(0).(scoreApi.DisciplineScoreResult)
	}

	if rf, ok := ret.Get(1).(func(uint32, int) error); ok {
		r1 = rf(studentId, disciplineId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStudentDisciplines provides a mock function with given fields: studentId
func (_m *ClientInterface) GetStudentDisciplines(studentId uint32) (scoreApi.DisciplineScoreResults, error) {
	ret := _m.Called(studentId)

	var r0 scoreApi.DisciplineScoreResults
	var r1 error
	if rf, ok := ret.Get(0).(func(uint32) (scoreApi.DisciplineScoreResults, error)); ok {
		return rf(studentId)
	}
	if rf, ok := ret.Get(0).(func(uint32) scoreApi.DisciplineScoreResults); ok {
		r0 = rf(studentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(scoreApi.DisciplineScoreResults)
		}
	}

	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(studentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClientInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientInterface creates a new instance of ClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the Mocks expectations.
func NewClientInterface(t mockConstructorTestingTNewClientInterface) *ClientInterface {
	mock := &ClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
